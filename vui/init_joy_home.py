'''
Utility module to help with setting up the initial contents of the
JOY_HOME directory.

These contents are kept in this Python module as a base64-encoded zip
file, so you can just do, e.g.:

    import init_joy_home
    init_joy_home.initialize(JOY_HOME)

'''
import base64, os, StringIO, zipfile


def initialize(joy_home):
    Z.extractall(joy_home)


def create_data(from_dir='./default_joy_home'):
    f = StringIO.StringIO()
    z = zipfile.ZipFile(f, mode='w')
    for fn in os.listdir(from_dir):
        from_fn = os.path.join(from_dir, fn)
        z.write(from_fn, fn)
    z.close()
    return base64.encodestring(f.getvalue())


Z = zipfile.ZipFile(StringIO.StringIO(base64.decodestring('''\
UEsDBBQAAAAAACdbd0wAAAAAAAAAAAAAAAAHAAAAbG9nLnR4dFBLAwQUAAAAAAAnW3dMd3+aXgMA
AAADAAAADAAAAHN0YWNrLnBpY2tsZSh0LlBLAwQUAAAAAAA1aXdMAAik8N8MAADfDAAACgAAAGxp
YnJhcnkucHknJycKVGhpcyBmaWxlIGlzIGV4ZWNmaWxlKCknZCB3aXRoIGEgbmFtZXNwYWNlIGNv
bnRhaW5pbmc6CgogIEQgLSB0aGUgSm95IGRpY3Rpb25hcnkKICBkIC0gdGhlIERpc3BsYXkgb2Jq
ZWN0CiAgcHQgLSB0aGUgUGVyc2lzdFRhc2sgb2JqZWN0CiAgbG9nIC0gdGhlIGxvZy50eHQgdmll
d2VyCiAgbG9vcCAtIHRoZSBUaGVMb29wIG1haW4gbG9vcCBvYmplY3QKICBzdGFja19ob2xkZXIg
LSB0aGUgUHl0aG9uIGxpc3Qgb2JqZWN0IHRoYXQgaG9sZHMgdGhlIEpveSBzdGFjayB0dXBsZQog
IHdvcmxkIC0gdGhlIEpveSBlbnZpcm9ubWVudAoKJycnCmZyb20gam95LmxpYnJhcnkgaW1wb3J0
ICgKICAgIERlZmluaXRpb25XcmFwcGVyLAogICAgRnVuY3Rpb25XcmFwcGVyLAogICAgU2ltcGxl
RnVuY3Rpb25XcmFwcGVyLAogICAgKQpmcm9tIGpveS51dGlscy5zdGFjayBpbXBvcnQgbGlzdF90
b19zdGFjaywgcHVzaGJhY2sKaW1wb3J0IGNvcmUsIHRleHRfdmlld2VyLCBzdGFja192aWV3ZXIK
CgpkZWYgaW5zdGFsbChjb21tYW5kKTogRFtjb21tYW5kLm5hbWVdID0gY29tbWFuZAoKCkBpbnN0
YWxsCkBTaW1wbGVGdW5jdGlvbldyYXBwZXIKZGVmIGxpc3RfcmVzb3VyY2VzKHN0YWNrKToKICAg
IHJldHVybiAnXG4nLmpvaW4ocHQuc2NhbigpKSwgc3RhY2sKCgpAaW5zdGFsbApAU2ltcGxlRnVu
Y3Rpb25XcmFwcGVyCmRlZiBvcGVuX3N0YWNrKHN0YWNrKToKICAgICh4LCAoeSwgXykpLCBzdGFj
ayA9IHN0YWNrCiAgICBWID0gZC5vcGVuX3ZpZXdlcih4LCB5LCBzdGFja192aWV3ZXIuU3RhY2tW
aWV3ZXIpCiAgICBWLmRyYXcoKQogICAgcmV0dXJuIHN0YWNrCgoKQGluc3RhbGwKQFNpbXBsZUZ1
bmN0aW9uV3JhcHBlcgpkZWYgb3Blbl9yZXNvdXJjZShzdGFjayk6CiAgICAoKHgsICh5LCBfKSks
IChuYW1lLCBzdGFjaykpID0gc3RhY2sKICAgIG9tID0gY29yZS5PcGVuTWVzc2FnZSh3b3JsZCwg
bmFtZSkKICAgIGQuYnJvYWRjYXN0KG9tKQogICAgaWYgb20uc3RhdHVzID09IGNvcmUuU1VDQ0VT
UzoKICAgICAgICBWID0gZC5vcGVuX3ZpZXdlcih4LCB5LCB0ZXh0X3ZpZXdlci5UZXh0Vmlld2Vy
KQogICAgICAgIFYuY29udGVudF9pZCwgVi5saW5lcyA9IG9tLmNvbnRlbnRfaWQsIG9tLnRoaW5n
CiAgICAgICAgVi5kcmF3KCkKICAgIHJldHVybiBzdGFjawoKCkBpbnN0YWxsCkBTaW1wbGVGdW5j
dGlvbldyYXBwZXIKZGVmIG5hbWVfdmlld2VyKHN0YWNrKToKICAgIG5hbWUsIHN0YWNrID0gc3Rh
Y2sKICAgIGFzc2VydCBpc2luc3RhbmNlKG5hbWUsIHN0ciksIHJlcHIobmFtZSkKICAgIGlmIGQu
Zm9jdXNlZF92aWV3ZXIgYW5kIG5vdCBkLmZvY3VzZWRfdmlld2VyLmNvbnRlbnRfaWQ6CiAgICAg
ICAgZC5mb2N1c2VkX3ZpZXdlci5jb250ZW50X2lkID0gbmFtZQogICAgICAgIHBtID0gY29yZS5Q
ZXJzaXN0TWVzc2FnZSh3b3JsZCwgbmFtZSwgdGhpbmc9ZC5mb2N1c2VkX3ZpZXdlci5saW5lcykK
ICAgICAgICBkLmJyb2FkY2FzdChwbSkKICAgICAgICBkLmZvY3VzZWRfdmlld2VyLmRyYXdfbWVu
dSgpCiAgICByZXR1cm4gc3RhY2sKCgojI0BpbnN0YWxsCiMjQFNpbXBsZUZ1bmN0aW9uV3JhcHBl
cgojI2RlZiBwZXJzaXN0X3ZpZXdlcihzdGFjayk6CiMjICAgIGlmIHNlbGYuZm9jdXNlZF92aWV3
ZXI6CiMjICAgICAgICAKIyMgICAgICAgIHNlbGYuZm9jdXNlZF92aWV3ZXIuY29udGVudF9pZCA9
IG5hbWUKIyMgICAgICAgIHNlbGYuZm9jdXNlZF92aWV3ZXIuZHJhd19tZW51KCkKIyMgICAgcmV0
dXJuIHN0YWNrCgoKQGluc3RhbGwKQFNpbXBsZUZ1bmN0aW9uV3JhcHBlcgpkZWYgaW5zY3JpYmUo
c3RhY2spOgogICAgZGVmaW5pdGlvbiwgc3RhY2sgPSBzdGFjawogICAgRGVmaW5pdGlvbldyYXBw
ZXIuYWRkX2RlZihkZWZpbml0aW9uLCBEKQogICAgcmV0dXJuIHN0YWNrCgoKQGluc3RhbGwKQFNp
bXBsZUZ1bmN0aW9uV3JhcHBlcgpkZWYgb3Blbl92aWV3ZXIoc3RhY2spOgogICAgKCh4LCAoeSwg
XykpLCAoY29udGVudCwgc3RhY2spKSA9IHN0YWNrCiAgICBWID0gZC5vcGVuX3ZpZXdlcih4LCB5
LCB0ZXh0X3ZpZXdlci5UZXh0Vmlld2VyKQogICAgVi5saW5lcyA9IGNvbnRlbnQuc3BsaXRsaW5l
cygpCiAgICBWLmRyYXcoKQogICAgcmV0dXJuIHN0YWNrCgoKQGluc3RhbGwKQFNpbXBsZUZ1bmN0
aW9uV3JhcHBlcgpkZWYgZ29vZF92aWV3ZXJfbG9jYXRpb24oc3RhY2spOgogICAgdmlld2VycyA9
IGxpc3QoZC5pdGVyX3ZpZXdlcnMoKSkKICAgIGlmIHZpZXdlcnM6CiAgICAgICAgdmlld2Vycy5z
b3J0KGtleT1sYW1iZGEgKFYsIHgsIHkpOiBWLncgKiBWLmgpCiAgICAgICAgViwgeCwgeSA9IHZp
ZXdlcnNbLTFdCiAgICAgICAgY29vcmRzID0gKHggKyAxLCAoeSArIFYuaCAvIDIsICgpKSkKICAg
IGVsc2U6CiAgICAgICAgY29vcmRzID0gKDAsICgwLCAoKSkpCiAgICByZXR1cm4gY29vcmRzLCBz
dGFjawoKCkBpbnN0YWxsCkBGdW5jdGlvbldyYXBwZXIKZGVmIGNtcF8oc3RhY2ssIGV4cHJlc3Np
b24sIGRpY3Rpb25hcnkpOgogICAgTCwgKEUsIChHLCAoYiwgKGEsIHN0YWNrKSkpKSA9IHN0YWNr
CiAgICBleHByZXNzaW9uID0gcHVzaGJhY2soRyBpZiBhID4gYiBlbHNlIEwgaWYgYSA8IGIgZWxz
ZSBFLCBleHByZXNzaW9uKQogICAgcmV0dXJuIHN0YWNrLCBleHByZXNzaW9uLCBkaWN0aW9uYXJ5
CgoKQGluc3RhbGwKQFNpbXBsZUZ1bmN0aW9uV3JhcHBlcgpkZWYgbGlzdF92aWV3ZXJzKHN0YWNr
KToKICAgIGxpbmVzID0gW10KICAgIGZvciB4LCBUIGluIGQudHJhY2tzOgogICAgICAgIGxpbmVz
LmFwcGVuZCgneDogJWksIHc6ICVpLCAlcicgJSAoeCwgVC53LCBUKSkKICAgICAgICBmb3IgeSwg
ViBpbiBULnZpZXdlcnM6CiAgICAgICAgICAgIGxpbmVzLmFwcGVuZCgnICAgIHk6ICVpLCBoOiAl
aSwgbmFtZTogJXMsICVyJyAlICh5LCBWLmgsIFYuY29udGVudF9pZCwgVikpCiAgICByZXR1cm4g
J1xuJy5qb2luKGxpbmVzKSwgc3RhY2sKCgpAaW5zdGFsbApAU2ltcGxlRnVuY3Rpb25XcmFwcGVy
CmRlZiBzcGxpdGxpbmVzKHN0YWNrKToKICAgIHRleHQsIHN0YWNrID0gc3RhY2sKICAgIGFzc2Vy
dCBpc2luc3RhbmNlKHRleHQsIHN0ciksIHJlcHIodGV4dCkKICAgIHJldHVybiBsaXN0X3RvX3N0
YWNrKHRleHQuc3BsaXRsaW5lcygpKSwgc3RhY2sKCgpAaW5zdGFsbApAU2ltcGxlRnVuY3Rpb25X
cmFwcGVyCmRlZiBoaXlhKHN0YWNrKToKICAgIGlmIGQuZm9jdXNlZF92aWV3ZXI6CiAgICAgICAg
ZC5mb2N1c2VkX3ZpZXdlci5pbnNlcnQoJ0hpIFdvcmxkIScpCiAgICByZXR1cm4gc3RhY2sKUEsD
BBQAAAAAAIhkd0xJJ94ZORAAADkQAAALAAAAc2NyYXRjaC50eHRXaGF0IGlzIGl0PwoKQSBzaW1w
bGUgR3JhcGhpY2FsIFVzZXIgSW50ZXJmYWNlIGZvciB0aGUgSm95IHByb2dyYW1taW5nIGxhbmd1
YWdlLAp3cml0dGVuIHVzaW5nIFB5Z2FtZSB0byBieXBhc3MgWDExIGV0LiBhbC4sIG1vZGVsZWQg
b24gdGhlIE9iZXJvbiBPUywgYW5kCmludGVuZGVkIHRvIGJlIGp1c3QgZnVuY3Rpb25hbCBlbm91
Z2ggdG8gc3VwcG9ydCBib290c3RyYXBwaW5nIGZ1cnRoZXIgSm95CmRldmVsb3BtZW50LgoKSXQn
cyBiYXNpYyBmdW5jdGlvbmFsaXR5IGlzIG1vcmUtb3ItbGVzcyBhcyBhIGNydWRlIHRleHQgZWRp
dG9yIGFsb25nIHdpdGgKYSBzaW1wbGUgSm95IHJ1bnRpbWUgKGludGVycHJldGVyLCBzdGFjaywg
YW5kIGRpY3Rpb25hcnkuKSAgSXQgYXV0by0gc2F2ZXMKYW55IG5hbWVkIGZpbGVzIChpbiBhIHZl
cnNpb25lZCBob21lIGRpcmVjdG9yeSkgYW5kIHlvdSBjYW4gd3JpdGUgbmV3IEpveQpwcmltaXRp
dmVzIGluIFB5dGhvbiBhbmQgSm95IGRlZmluaXRpb25zIGFuZCBpbW1lZGlhdGVseSBpbnN0YWxs
IGFuZCB1c2UKdGhlbSwgYXMgd2VsbCBhcyByZWNvcmRpbmcgdGhlbSBmb3IgcmV1c2UgKGFmdGVy
IHJlc3RhcnRzLikKCkN1cnJlbnRseSwgdGhlcmUgYXJlIG9ubHkgdHdvIGtpbmRzIG9mIChpbnRl
cmVzdGluZykgdmlld2VyczogVGV4dFZpZXdlcnMKYW5kIFN0YWNrVmlld2VyLiBUaGUgVGV4dFZp
ZXdlcnMgYXJlIGNydWRlIHRleHQgZWRpdG9ycy4gIFRoZXkgcHJvdmlkZQpqdXN0IGVub3VnaCBm
dW5jdGlvbmFsaXR5IHRvIGxldCB0aGUgdXNlciB3cml0ZSB0ZXh0IGFuZCBjb2RlIChQeXRob24g
YW5kCkpveSkgYW5kIGV4ZWN1dGUgSm95IGZ1bmN0aW9ucy4gIE9uZSBpbXBvcnRhbnQgdGhpbmcg
dGhleSBkbyBpcwphdXRvbWF0aWNhbGx5IHNhdmUgdGhlaXIgY29udGVudCBhZnRlciBjaGFuZ2Vz
LiAgTm8gbW9yZSBsb3N0IHdvcmsuCgpUaGUgU3RhY2tWaWV3ZXIgaXMgYSBzcGVjaWFsaXplZCBU
ZXh0Vmlld2VyIHRoYXQgc2hvd3MgdGhlIGNvbnRlbnRzIG9mIHRoZQpKb3kgc3RhY2sgb25lIGxp
bmUgcGVyIHN0YWNrIGl0ZW0uICBJdCdzIGEgdmVyeSBoYW5keSB2aXN1YWwgYWlkIHRvIGtlZXAK
dHJhY2sgb2Ygd2hhdCdzIGdvaW5nIG9uLiAgVGhlcmUncyBhbHNvIGEgbG9nLnR4dCBmaWxlIHRo
YXQgZ2V0cyB3cml0dGVuCnRvIHdoZW4gY29tbWFuZHMgYXJlIGV4ZWN1dGVkLCBhbmQgc28gcmVj
b3JkcyB0aGUgbG9nIG9mIHVzZXIgYWN0aW9ucyBhbmQKc3lzdGVtIGV2ZW50cy4gIEl0IHRlbmRz
IHRvIGZpbGwgdXAgcXVpY2tseSBzbyB0aGVyZSdzIGEgcmVzZXRfbG9nIGNvbW1hbmQKdGhhdCBj
bGVhcnMgaXQgb3V0LgoKVmlld2VycyBoYXZlICJncm93IiBhbmQgImNsb3NlIiBpbiB0aGVpciBt
ZW51IGJhcnMuICBUaGVzZSBhcmUgYnV0dG9ucy4KV2hlbiB5b3UgcmlnaHQtY2xpY2sgb24gZ3Jv
dyBhIHZpZXdlciBhIGNvcHkgaXMgY3JlYXRlZCB0aGF0IGNvdmVycyB0aGF0CnZpZXdlcidzIGVu
dGlyZSB0cmFjay4gIElmIHlvdSBncm93IGEgdmlld2VyIHRoYXQgYWxyZWFkeSB0YWtlcyB1cCBp
dHMKd2hvbGUgdHJhY2sgdGhlbiBhIGNvcHkgaXMgY3JlYXRlZCB0aGF0IHRha2VzIHVwIGFuIGFk
ZGl0aW9uYWwgdHJhY2ssIHVwCnRvIHRoZSB3aG9sZSBzY3JlZW4uICBDbG9zaW5nIGEgdmlld2Vy
IGp1c3QgZGVsZXRlcyB0aGF0IHZpZXdlciwgYW5kIHdoZW4KYSB0cmFjayBoYXMgbm8gbW9yZSB2
aWV3ZXJzLCBpdCBpcyBkZWxldGVkIGFuZCB0aGF0IGV4cG9zZXMgYW55IHByZXZpb3VzCnRyYWNr
cyBhbmQgdmlld2VycyB0aGF0IHdlcmUgaGlkZGVuLgoKKE5vdGU6IGlmIHlvdSBldmVyIGNsb3Nl
IGFsbCB0aGUgdmlld2VycyBhbmQgYXJlIHNpdHRpbmcgYXQgYSBibGFuayBzY3JlZW4Kd2l0aCAg
bm93aGVyZSB0byB0eXBlIGFuZCBleGVjdXRlIGNvbW1hbmRzLCBwcmVzcyB0aGUgUGF1c2UvQnJl
YWsga2V5LgpUaGlzIHdpbGwgb3BlbiBhIG5ldyAidHJhcCIgdmlld2VyIHdoaWNoIHlvdSBjYW4g
dGhlbiB1c2UgdG8gcmVjb3Zlci4pCgpDb3BpZXMgb2YgYSB2aWV3ZXIgYWxsIHNoYXJlIHRoZSBz
YW1lIG1vZGVsIGFuZCB1cGRhdGUgdGhlaXIgZGlzcGxheSBhcyBpdApjaGFuZ2VzLiAoSWYgeW91
IGhhdmUgdHdvIHZpZXdlcnMgb3BlbiBvbiB0aGUgc2FtZSBuYW1lZCByZXNvdXJjZSBhbmQgZWRp
dApvbmUgeW91J2xsIHNlZSB0aGUgb3RoZXIgdXBkYXRlIGFzIHlvdSB0eXBlLikKClVJIEd1aWRl
CgpsZWZ0IG1vdXNlIHNldHMgY3Vyc29yIGluIHRleHQsIGluIG1lbnUgYmFyIHJlc2l6ZXMgdmll
d2VyIGludGVyYWN0aXZlbHkKKHRoaXMgaXMgYSBsaXR0bGUgYnVnZ3kgaW4gdGhhdCB5b3UgY2Fu
IG1vdmUgdGhlIG1vdXNlIHF1aWNrbHkgYW5kIGdldApvdXRzaWRlIHRoZSBtZW51LCBsZWF2aW5n
IHRoZSB2aWV3ZXIgaW4gdGhlICJyZXNpemluZyIgc3RhdGUuIFVudGlsIEkgZml4CnRoaXMsIHRo
ZSB3b3JrYXJvdW5kIGlzIHRvIGp1c3QgZ3JhYiB0aGUgbWVudSBiYXIgYWdhaW4gYW5kIHdpZ2ds
ZSBpdCBhCmZldyBwaXhlbHMgYW5kIGxldCBnby4gIFRoaXMgd2lsbCByZXNldCB0aGUgbWFjaGlu
ZXJ5LikKClJpZ2h0IG1vdXNlIGV4ZWN1dGVzIEpveSBjb21tYW5kIChmdW5jdGlvbnMpLCBhbmQg
eW91IGNhbiBkcmFnIHdpdGggdGhlCnJpZ2h0IGJ1dHRvbiB0byBoaWdobGlnaHQgKHdlbGwsIHVu
ZGVybGluZSkgY29tbWFuZHMuICBXb3JkcyB0aGF0IGFyZW4ndApuYW1lcyBvZiBKb3kgY29tbWFu
ZHMgd29uJ3QgYmUgdW5kZXJsaW5lZC4gIFJlbGVhc2UgdGhlIGJ1dHRvbiB0byBleGVjdXRlCnRo
ZSBjb21tYW5kLgoKVGhlIG1pZGRsZSBtb3VzZSBidXR0b24gKHVzdWFsbHkgYSB3aGVlbCB0aGVz
ZSBkYXlzKSBzY3JvbGxzIHRoZSB0ZXh0IGJ1dAp5b3UgY2FuIGFsc28gY2xpY2sgYW5kIGRyYWcg
YW55IHZpZXdlciB3aXRoIGl0IHRvIG1vdmUgdGhhdCB2aWV3ZXIgdG8KYW5vdGhlciB0cmFjayBv
ciB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBpbiB0aGUgc2FtZSB0cmFjay4gIFRoZXJlJ3Mgbm8K
ZGlyZWN0IHZpc3VhbCBmZWVkYmFjayBmb3IgdGhpcyAoeWV0KSBidXQgdGhhdCBkb3Nlbid0IHNl
ZW0gdG8gaW1wYWlyIGl0cwp1c2VmdWxuZXNzLgoKRjEsIEYyIC0gc2V0IHNlbGVjdGlvbiBiZWdp
biBhbmQgZW5kIG1hcmtlcnMgKGNydWRlIGJ1dCB1c2FibGUuKQoKRjMgLSBjb3B5IHNlbGVjdGVk
IHRleHQgdG8gdGhlIHRvcCBvZiB0aGUgc3RhY2suCgpTaGlmdC1GMyAtIGFzIGNvcHkgdGhlbiBy
dW4gInBhcnNlIiBjb21tYW5kIG9uIHRoZSBzdHJpbmcuCgpGNCAtIGN1dCBzZWxlY3RlZCB0ZXh0
IHRvIHRoZSB0b3Agb2YgdGhlIHN0YWNrLgoKU2hpZnQtRjQgLSBhcyBjdXQgdGhlbiBydW4gInBv
cCIgKGRlbGV0ZSBzZWxlY3Rpb24uKQoKSm95CgpQcmV0dHkgbXVjaCBhbGwgb2YgdGhlIHJlc3Qg
b2YgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIHN5c3RlbSBpcyBwcm92aWRlZApieSBleGVjdXRp
bmcgSm95IGNvbW1hbmRzIChha2EgZnVuY3Rpb25zLCBha2EgIndvcmRzIiBpbiBGb3J0aCkgYnkg
cmlnaHQtCmNsaWNraW5nIG9uIHRoZWlyIG5hbWVzIGluIGFueSB0ZXh0LgoKVG8gZ2V0IGhlbHAg
b24gYSBKb3kgZnVuY3Rpb24gc2VsZWN0IHRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiBpbiBhClRl
eHRWaWV3ZXIgdXNpbmcgRjEgYW5kIEYyLCB0aGVuIHByZXNzIHNoaWZ0LUYzIHRvIHBhcnNlIHRo
ZSBzZWxlY3Rpb24uClRoZSBmdW5jdGlvbiAocmVhbGx5IGl0cyBTeW1ib2wpIHdpbGwgYXBwZWFy
IG9uIHRoZSBzdGFjayBpbiBicmFja2V0cyAoYQoicXVvdGVkIHByb2dyYW0iIHN1Y2ggYXMgIltw
b3BdIi4pICBUaGVuIHJpZ2h0LWNsaWNrIG9uIHRoZSB3b3JkIGhlbHAgaW4KYW55IFRleHRWaWV3
ZXIgKGlmIGl0J3Mgbm90IGFscmVhZHkgdGhlcmUsIGp1c3QgdHlwZSBpdCBpbiBzb21ld2hlcmUu
KQpUaGlzIHdpbGwgcHJpbnQgdGhlIGRvY3N0cmluZyBvciBkZWZpbml0aW9uIG9mIHRoZSB3b3Jk
IChmdW5jdGlvbikgdG8Kc3Rkb3V0LiAgQXQgc29tZSBwb2ludCBJJ2xsIHdyaXRlIGEgdGhpbmcg
dG8gc2VuZCB0aGF0IHRvIHRoZSBsb2cudHh0IGZpbGUKaW5zdGVhZCwgYnV0IGZvciBub3cgbG9v
ayBmb3Igb3V0cHV0IGluIHRoZSB0ZXJtaW5hbC4KUEsDBBQAAAAAACdbd0yW6MvDbQMAAG0DAAAP
AAAAZGVmaW5pdGlvbnMudHh0c2VlX3N0YWNrID09IGdvb2Rfdmlld2VyX2xvY2F0aW9uIG9wZW5f
c3RhY2sKc2VlX3Jlc291cmNlcyA9PSBsaXN0X3Jlc291cmNlcyBnb29kX3ZpZXdlcl9sb2NhdGlv
biBvcGVuX3ZpZXdlcgpvcGVuX3Jlc291cmNlX2F0X2dvb2RfbG9jYXRpb24gPT0gZ29vZF92aWV3
ZXJfbG9jYXRpb24gb3Blbl9yZXNvdXJjZQpzZWVfbG9nID09ICJsb2cudHh0IiBvcGVuX3Jlc291
cmNlX2F0X2dvb2RfbG9jYXRpb24Kc2VlX2RlZmluaXRpb25zID09ICJkZWZpbml0aW9ucy50eHQi
IG9wZW5fcmVzb3VyY2VfYXRfZ29vZF9sb2NhdGlvbgpyb3VuZF90b19jZW50cyA9PSAxMDAgKiAr
KyBmbG9vciAxMDAgLwpyZXNldF9sb2cgPT0gImRlbCBsb2cubGluZXNbMTpdIDsgbG9nLmF0X2xp
bmUgPSAwIiBldmFsdWF0ZQpzZWVfbWVudSA9PSAibWVudS50eHQiIGdvb2Rfdmlld2VyX2xvY2F0
aW9uIG9wZW5fcmVzb3VyY2UKCiMgT3JkZXJlZCBCaW5hcnkgVHJlZSBkYXRhc3RydWN0dXJlIGZ1
bmN0aW9ucy4KQlRyZWUtbmV3ID09IHN3YXAgW1tdIFtdXSBjb25zIGNvbnMKIF9CVHJlZS1QID09
IG92ZXIgW3BvcG9wIHBvcG9wIGZpcnN0XSBudWxsYXJ5CiBfQlRyZWUtVD4gPT0gW2NvbnMgY29u
cyBkaXBkZF0gY29ucyBjb25zIGNvbnMgaW5mcmEKIF9CVHJlZS1UPCA9PSBbY29ucyBjb25zIGRp
cGRdIGNvbnMgY29ucyBjb25zIGluZnJhCiBfQlRyZWUtRSA9PSBwb3Agc3dhcCByb2xsPCByZXN0
IHJlc3QgY29ucyBjb25zCiBfQlRyZWUtcmVjdXIgPT0gX0JUcmVlLVAgW19CVHJlZS1UPl0gW19C
VHJlZS1FXSBbX0JUcmVlLVQ8XSBjbXAKQlRyZWUtYWRkID09IFtwb3BvcCBub3RdIFtbcG9wXSBk
aXBkIEJUcmVlLW5ld10gW10gW19CVHJlZS1yZWN1cl0gZ2VucmVjClBLAwQUAAAAAAAnW3dM2ibq
o88EAADPBAAACAAAAG1lbnUudHh0ICBuYW1lX3ZpZXdlcgogIGxpc3RfcmVzb3VyY2VzCiAgb3Bl
bl9yZXNvdXJjZV9hdF9nb29kX2xvY2F0aW9uCiAgZ29vZF92aWV3ZXJfbG9jYXRpb24KICBvcGVu
X3ZpZXdlcgogIHNlZV9zdGFjawogIHNlZV9yZXNvdXJjZXMKICBzZWVfZGVmaW5pdGlvbnMKICBz
ZWVfbG9nCiAgcmVzZXRfbG9nCgogIGluc2NyaWJlCiAgZXZhbHVhdGUKCiAgcG9wIGNsZWFyICAg
IGR1cCBzd2FwCgogIGFkZCBzdWIgbXVsIGRpdiB0cnVlZGl2IG1vZHVsdXMgZGl2bW9kCiAgcG0g
KysgLS0gc3VtIHByb2R1Y3QgcG93IHNxciBzcXJ0CiAgPCA8PSA9ID49ID4gPD4KICAmIDw8ID4+
CgogIGkgZHVwZGlwCgohPSAlICYgKiAqZnJhY3Rpb24gKmZyYWN0aW9uMCArICsrIC0gLS0gLyA8
IDw8IDw9IDw+ID0gPiA+PSA+PiA/IF4KYWJzIGFkZCBhbmFtb3JwaGlzbSBhbmQgYXBwMSBhcHAy
IGFwcDMgYXQgYXZlcmFnZQpiIGJpbmFyeSBicmFuY2gKY2hvaWNlIGNsZWFyIGNsZWF2ZSBjb25j
YXQgY29ucwpkaW5mcmlyc3QgZGlwIGRpcGQgZGlwZGQgZGlzZW5zdGFja2VuIGRpdiBkaXZtb2Qg
ZG93bl90b196ZXJvIGRyb3AKZHVkaXBkIGR1cCBkdXBkIGR1cGRpcAplbnN0YWNrZW4gZXEKZmly
c3QgZmxhdHRlbiBmbG9vciBmbG9vcmRpdgpnY2QgZ2UgZ2VucmVjIGdldGl0ZW0gZ3JhbmRfcmVz
ZXQgZ3QKaGVscAppIGlkIGlmdGUgaW5mcmEgaW5zY3JpYmUKa2V5X2JpbmRpbmdzCmxlIGxlYXN0
X2ZyYWN0aW9uIGxvb3AgbHNoaWZ0IGx0Cm1hcCBtYXggbWluIG1vZCBtb2R1bHVzIG1vdXNlX2Jp
bmRpbmdzIG11bApuZSBuZWcgbm90IG51bGxhcnkKb2Ygb3Igb3ZlcgpwYW0gcGFyc2UgcGljayBw
bSBwb3AgcG9wZCBwb3BkZCBwb3BvcCBwb3cgcHJlZCBwcmltcmVjIHByb2R1Y3QKcXVvdGVkCnJh
bmdlIHJhbmdlX3RvX3plcm8gcmVtIHJlbWFpbmRlciByZW1vdmUgcmVzZXRfbG9nIHJlc3QgcmV2
ZXJzZQpyb2xsPCByb2xsPiByb2xsZG93biByb2xsdXAgcnNoaWZ0IHJ1bgpzZWNvbmQgc2VsZWN0
IHNoYXJpbmcgc2hvd19sb2cgc2h1bnQgc2l6ZSBzb3J0IHNxciBzcXJ0IHN0YWNrIHN0ZXAKc3Rl
cF96ZXJvIHN1YiBzdWNjIHN1bSBzd2FhY2sgc3dhcCBzd29uY2F0IHN3b25zCnRha2UgdGVybmFy
eSB0aGlyZCB0aW1lcyB0cnVlZGl2IHRydXRoeSB0dWNrCnVuYXJ5IHVuY29ucyB1bmlxdWUgdW5p
dCB1bnF1b3RlZCB1bnN0YWNrCnZvaWQKd2FycmFudHkgd2hpbGUgd29yZHMKeCB4b3IKemlwClBL
AQIUAxQAAAAAACdbd0wAAAAAAAAAAAAAAAAHAAAAAAAAAAAAAACAgQAAAABsb2cudHh0UEsBAhQD
FAAAAAAAJ1t3THd/ml4DAAAAAwAAAAwAAAAAAAAAAAAAAICBJQAAAHN0YWNrLnBpY2tsZVBLAQIU
AxQAAAAAADVpd0wACKTw3wwAAN8MAAAKAAAAAAAAAAAAAACkgVIAAABsaWJyYXJ5LnB5UEsBAhQD
FAAAAAAAiGR3TEkn3hk5EAAAORAAAAsAAAAAAAAAAAAAAICBWQ0AAHNjcmF0Y2gudHh0UEsBAhQD
FAAAAAAAJ1t3TJboy8NtAwAAbQMAAA8AAAAAAAAAAAAAAICBux0AAGRlZmluaXRpb25zLnR4dFBL
AQIUAxQAAAAAACdbd0zaJuqjzwQAAM8EAAAIAAAAAAAAAAAAAACAgVUhAABtZW51LnR4dFBLBQYA
AAAABgAGAFMBAABKJgAAAAA=''')))


if __name__ == '__main__':
    print create_data()
